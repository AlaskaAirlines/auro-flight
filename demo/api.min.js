import { css, LitElement, html } from 'lit';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import '@aurodesignsystem/auro-flightline';
import '@aurodesignsystem/auro-flightline/src/auro-flight-segment.js';
import { html as html$1 } from 'lit/static-html.js';
import { AuroDependencyVersioning } from '@aurodesignsystem/auro-library/scripts/runtime/dependencyTagVersioning.mjs';
import { AuroDatetime } from '@aurodesignsystem/auro-datetime/src/auro-datetime.js';

var styleCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}.flightFooter{padding-top:var(--ds-size-200, 1rem)}.headerContainer{display:flex;justify-content:space-between}`;

var colorFlightCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}[name=footer]{color:var(--ds-auro-flight-footer-text-color)}`;

var tokensCss = css`:host{--ds-auro-flight-footer-text-color: var(--ds-color-text-secondary-default, #525252);--ds-auro-flight-header-days-changed-text-color: var(--ds-color-utility-error-default, #cc1816);--ds-auro-flight-header-text-color: var(--ds-color-text-secondary-default, #525252);--ds-auro-flight-cancelled-station-text-color: var(--ds-color-utility-error-default, #cc1816);--ds-auro-flight-station-text-color: var(--ds-color-text-secondary-default, #525252);--ds-auro-flight-time-text-color: var(--ds-color-text-primary-default, #2a2a2a)}`;

function getDateDifference(departureTime, arrivalTime){
  const departure = departureTime.slice(0, -15);
  const arrival = arrivalTime.slice(0, -15);
  const timeDiff = new Date(arrival).getTime() - new Date(departure).getTime();
  return timeDiff / (1000 * 3600 * 24);
}

var styleFlightHeaderCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host{display:flex;justify-content:space-between;padding-bottom:var(--ds-size-50, 0.25rem);font-size:var(--ds-text-body-size-default, 1rem)}.daysChanged{align-self:flex-end;padding-left:var(--ds-text-body-size-xs, 0.75rem)}`;

var colorFlightHeaderCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host{color:var(--ds-auro-flight-header-text-color)}.daysChanged{color:var(--ds-auro-flight-header-days-changed-text-color)}`;

// Copyright (c) 2021 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.



// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * The auro-flight-header element displays airline, duration, and day change information.
 *
 * @attr {Array} flights - Array of flight numbers `['AS 123', 'EK 432']`
 * @attr {String} duration - String for the duration. `505`
 * @attr {String} departureTime - String for the departure ISO 8601 time. `2022-04-13T12:30:00-04:00`
 * @attr {String} arrivalTime - String for the arrival ISO 8601 time. `2022-04-13T12:30:00-04:00`
 * @csspart durationContainer - Apply css to the duration container
 * @csspart flightType - Apply css to the flight type
 */

// build the component class

class AuroFlightHeader extends LitElement {

  // function to define props used within the scope of this component
  static get properties() {
    return {
      flights:      { type: Array },
      duration:     { type: String },
      departureTime:{ type: String },
      arrivalTime:  { type: String }
    };
  }

  static get styles() {
    return [
      css`${styleFlightHeaderCss}`,
      css`${colorFlightHeaderCss}`,
      css`${tokensCss}`
    ];
  }

  /**
   * @private
   * @returns {String} Parsed airline code output.
   * Internal function to render either the flight number OR 'Multiple flights'.
   */
  flightType() {
    switch (this.flights.length) {
      case 0:
        return null;
      case 1:
        return this.flights[0];
      default:
        return 'Multiple flights';
    }
  }

  /**
   * Internal function to render the day change notification.
   * @private
   * @returns {String} Item to display.
   */
  flightDuration() {
    const dayDiff = getDateDifference(this.departureTime, this.arrivalTime);
    const arriveOneDayBefore = -1;
    let daysChanged = html``;

    if (dayDiff > 0) {
      daysChanged = html`<span class="daysChanged">+${dayDiff} day${dayDiff > 1 ? 's' : ''}</span>`;
    } else if (dayDiff === arriveOneDayBefore) {
      daysChanged = html`<span class="daysChanged">${dayDiff} day</span>`;
    }

    return daysChanged;
  }

  /**
   * @private
   * @returns Composed screen reader header.
   */
  composeScreenReaderHeader() {
    return html`
      ${this.flightType().includes('flights')
        ? this.flightType()
        : `Flight ${Array.from(this.flightType()).join(' ')}`
      },
      Duration: ${this.duration}
    `;
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    return html`
      <p class="util_displayHiddenVisually">
        ${this.composeScreenReaderHeader()}
      </p>
      <span class="flight" aria-hidden="true" part="flightType">
        ${this.flightType()}
      </span>
      <div aria-hidden="true" part="durationContainer">
        <time class="duration">${this.duration}</time>
        ${this.flightDuration()}
      </div>
    `;
  }
}

/* eslint max-statements: ["error", 11] */
if (!customElements.get("auro-flight-header")) {
  customElements.define("auro-flight-header", AuroFlightHeader);
}

var styleFlightMainCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}.arrivalTime,.departureTime{padding-bottom:var(--ds-size-25, 0.125rem);font-size:var(--ds-text-heading-300-size, 1.125rem);line-height:var(--ds-text-heading-700-height-breakpoint-md, 2.375rem)}:host{display:flex;flex-direction:row;justify-content:space-between}.slotContainer{flex-grow:2;padding-top:var(--ds-size-100, 0.5rem);padding-right:var(--ds-size-200, 1rem);padding-left:var(--ds-size-200, 1rem)}.departureTime{text-align:left}.departureStation{text-align:left}.arrivalTime{text-align:right}.arrivalStation{text-align:right}.arrival,.departure{display:inline-flex;flex-direction:column}.util_lineThrough{padding-right:var(--ds-size-200, 1rem);text-decoration:line-through}@media screen and (min-width: 576px){.departureTime,.arrivalTime{font-size:var(--ds-text-heading-700-size-breakpoint-sm, 1.75rem)}}`;

var colorFlightMainCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}.departureTime{color:var(--ds-auro-flight-main-time-text-color)}.departureStation{color:var(--ds-auro-flight-main-station-text-color)}.arrivalTime{color:var(--ds-auro-flight-main-time-text-color)}.arrivalStation{color:var(--ds-auro-flight-main-station-text-color)}.util_lineThrough{color:var(--ds-auro-flight-main-cancelled-station-text-color)}`;

var datetimeVersion = '2.2.1';

// Copyright (c) 2021 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * The auro-flight-main element renders the middle 'frame' of the auro-flight component with the auro-flightline.
 * DoT: STATION SIZE AND COLOR MUST BE IDENTICAL TO DISCLOSURE SIZE AND COLOR!
 *
 * @attr {Array} stops - Array of objects representing stopovers or layovers: "isStopover": bool, "arrivalStation": string, "duration": string ["123hr 123m"] (layover only). This content will not be used in the UI, but only constructs the a11y conversational phrase for screen readers and has no effect on the `auro-flight-segment` content.
 * @attr {Array} flights - Array of flight numbers `['AS 123', 'EK 432']`
 * @attr {Number} duration - String for the duration. `505`
 * @attr {String} arrivalTime - ISO 8601 time of arrival, e.g. `2022-04-13T12:30:00-04:00`
 * @attr {String} arrivalStation - Station of arrival, e.g. `SEA`
 * @attr {String} departureTime - ISO 8601 time of departure, e.g. `2022-04-13T12:30:00-04:00`
 * @attr {String} departureStation - Station of departure, e.g. `PVD`
 * @attr {String} reroutedDepartureStation - Station of rerouted departure, e.g. `PDX`
 * @attr {String} reroutedArrivalStation - Station of rerouted arrival, e.g. `AVP`
 * @slot default - anticipates `<auro-flight-segment>` instances
 * @csspart arrivalContainer - Apply css to the elements within the arrival container
 * @csspart departureContainer - Apply css to the elements within the departure container
 */

// build the component class
class AuroFlightMain extends LitElement {

  // function to define props used within the scope of this component
  static get properties() {
    return {
      stops:                    { type: Array },
      flights:                  { type: Array },
      duration:                 { type: Number },
      arrivalTime:              { type: String },
      arrivalStation:           { type: String },
      departureTime:            { type: String },
      departureStation:         { type: String },
      reroutedArrivalStation:   { type: String },
      reroutedDepartureStation: { type: String },
    };
  }

  static get styles() {
    return [
      css`${styleFlightMainCss}`,
      css`${colorFlightMainCss}`,
      css`${tokensCss}`,
    ];
  }

  constructor() {
    super();

    /**
     * Time template object used by convertTime() method.
     */
    this.timeTemplate = {
      hour: "2-digit",
      minute: "2-digit",
    };

    this.template = {};

    const versioning = new AuroDependencyVersioning();

    /**
     * @private
     */
    this.datetimeTag = versioning.generateTag('auro-datetime', datetimeVersion, AuroDatetime);
  }

  /**
   * @private
   * @param {string} time - UTC time.
   * @returns Localized time based from UTC string.
   */
  convertTime(time) {
    const slicedTime = time.slice(0, -6); // eslint-disable-line no-magic-numbers
    const newTime = new Date(slicedTime);
    const localizedTime = newTime.toLocaleString('en-US', this.timeTemplate).replace(/^0+/u, '');

    return localizedTime;
  }

  /**
   * @private
   * @param {string} station Airport code ex: SEA.
   * @returns Mutated string.
   */
  readStation(station) {
    return Array.from(station).join(' ');
  }

  /**
   * @param {number} idx A numbered index correlated to current stop.
   * @private
   * @returns A comma string or an empty string.
   */
  addComma(idx) {
    return idx === this.stops.length - 1 ? '' : ', ';
  }

  /**
   * @private
   * @returns Composed screen reader summary.
   */
  composeScreenReaderSummary() {
    const hasDepartureReroute = this.reroutedDepartureStation && this.reroutedDepartureStation !== 'undefined';
    const hasArrivalReroute = this.reroutedArrivalStation && this.reroutedArrivalStation !== 'undefined';
    const hasReroute = hasDepartureReroute || hasArrivalReroute;
    const dayDiff = getDateDifference(this.departureTime, this.arrivalTime);
    const daysFromDeparture = dayDiff === 1 ? 'next day' : `${dayDiff} days later`;
    const secondToLastIndex = 2;
    const layoverStopoverStringArray = this.stops
      ? this.stops.map((segment, idx) => html$1`
      with a ${segment.isStopover ? 'stop' : 'layover'} in ${this.readStation(segment.arrivalStation)}
      ${segment.duration ? `, for ${segment.duration}` : ''}${this.addComma(idx)}
      ${idx === this.stops.length - secondToLastIndex ? ' and ' : ''}`)
      : ', nonstop';

    const departureStation = this.readStation(this.departureStation);
    const departureTime = this.convertTime(this.departureTime);
    const arrivalStation = this.readStation(this.arrivalStation);
    const arrivalTime = this.convertTime(this.arrivalTime);
    let reroutedDepartureStation = '';
    let reroutedArrivalStation = '';

    if (hasDepartureReroute) {
      reroutedDepartureStation = this.readStation(this.reroutedDepartureStation);
    }

    if (hasArrivalReroute) {
      reroutedArrivalStation = this.readStation(this.reroutedArrivalStation);
    }

    return html$1`
      ${!hasReroute
        ? `Departs from ${departureStation} at ${departureTime}, arrives ${arrivalStation} at ${arrivalTime}`
        : `Flight ${departureStation} to ${arrivalStation} has been re-routed.
        The flight now departs from ${hasDepartureReroute ? reroutedDepartureStation : departureStation} at
        ${departureTime},
        and arrives  ${hasArrivalReroute ? reroutedArrivalStation : arrivalStation} at ${arrivalTime}`} ${dayDiff > 0 ? `, ${daysFromDeparture}` : ''}
        ${this.stops ? ', ' : ''} ${layoverStopoverStringArray}.
    `;
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const hasDepartureReroute = this.reroutedDepartureStation && this.reroutedDepartureStation !== 'undefined';
    const hasArrivalReroute = this.reroutedArrivalStation && this.reroutedArrivalStation !== 'undefined';
    return html$1`
        <div class="util_displayHiddenVisually">
          ${this.composeScreenReaderSummary()}
        </div>
        <div class="departure" aria-hidden="true" part="departureContainer">
          <time class="departureTime">
            <${this.datetimeTag} type="tzTime" setDate="${this.departureTime}"></${this.datetimeTag}>
          </time>
          <span class="departureStation">
          ${hasDepartureReroute
            ? html$1`
              <span>
                ${this.reroutedDepartureStation}
              </span>`
            : html$1``}

            <span class=${hasDepartureReroute ? "util_lineThrough" : ""}>
              ${this.departureStation}
          </span>
        </div>
        <div class="slotContainer" aria-hidden="true">
          <slot></slot>
        </div>
        <div class="arrival" aria-hidden="true" part="arrivalContainer">
          <time class="arrivalTime">
            <${this.datetimeTag} type="tzTime" setDate="${this.arrivalTime}"></${this.datetimeTag}>
          </time>
          <span class="arrivalStation">
            ${hasArrivalReroute
              ? html$1`
                <span>
                  ${this.reroutedArrivalStation}
                </span>`
              : html$1``}

            <span class=${hasArrivalReroute ? "util_lineThrough" : ""}>
              ${this.arrivalStation}
            </span>
          </span>
        </div>
    `;
  }
}

/* eslint max-statements: ["error", 18] */
if (!customElements.get("auro-flight-main")) {
  customElements.define("auro-flight-main", AuroFlightMain);
}

// Copyright (c) 2021 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * The auro-flight element renders a DoT compliant Flight listing.
 * This design has been tested via the Alaska Legal team for legal compliance.
 * Please DO NOT modify unit tests pertaining to DoT regulations.
 *
 * @attr {Array} stops - Array of objects representing stopovers or layovers: "isStopover": bool, "arrivalStation": string, "duration": string ["123hr 123m"] (layover only). This content will not be used in the UI, but only constructs the a11y conversational phrase for screen readers and has no effect on the `auro-flight-segment` content.
 * @attr {Array} flights - Array of flight numbers `['AS 123', 'EK 432']`
 * @attr {Number} duration - String for the duration. `505`
 * @attr {String} departureTime - String for the departure ISO 8601 time. `2022-04-13T12:30:00-04:00`
 * @attr {String} departureStation - String for the departure station. `SEA`
 * @attr {String} arrivalTime - String for the arrival ISO 8601 time. `2022-04-13T12:30:00-04:00`
 * @attr {String} arrivalStation - String for the arrival station. `PVD`
 * @attr {String} reroutedDepartureStation - String for the new departure station for rerouted flights. `PDX`
 * @attr {String} reroutedArrivalStation - String for the new arrival station for rerouted flights. `AVP`
 * @slot default - anticipates `<auro-flightline>` instance to fill out the flight timeline
 * @slot departureHeader - Text on top of the departure station's time
 * @slot arrivalHeader - Text on top of the arrival station's time
 * @slot footer - Lower section allowing for tertiary content to be attributed to the element. Per **DoT Regulations** do NOT edit the styles contained within this slot
 * @csspart flightContainer - Apply css to the elements within the flight component container
 */

// build the component class
class AuroFlight extends LitElement {
  constructor() {
    super();

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      stops:                    { type: Array },
      flights:                  { type: Array },
      duration:                 { type: Number },
      departureTime:            { type: String },
      arrivalTime:              { type: String },
      arrivalStation:           { type: String },
      departureStation:         { type: String },
      reroutedArrivalStation:   { type: String },
      reroutedDepartureStation: { type: String }
    };
  }

  static get styles() {
    return [
      css`${styleCss}`,
      css`${colorFlightCss}`,
      css`${tokensCss}`
    ];
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-flight"] - The name of element that you want to register to.
   *
   * @example
   * AuroFlight.register("custom-flight") // this will register this element to <custom-flight/>
   *
   */
  static register(name = "auro-flight") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroFlight);
  }


  // This function removes a CSS selector if the footer slot is empty
  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-flight');

    const slot = this.shadowRoot.querySelector("#footer"),
      slotWrapper = this.shadowRoot.querySelector("#flightFooter");

    if (!this.unformatted && slot.assignedNodes().length === 0) {
      return slotWrapper.classList.remove("flightFooter");
    }

    return null;
  }

  /**
   * @private
   * @param {number} duration - Number that defines duration of flight in minutes.
   * @returns {string} Number converted to hours and min string for UI.
   */
  convertDuration(duration) {
    const hour = 60;
    const hours = `${parseInt(duration / hour, 10)}h`;
    const calcMins = parseInt(duration % hour, 10);
    const minsString = calcMins === 0 ? '' : `${calcMins}m`;

    return `${hours} ${minsString}`;
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    return html`
      <section part="flightContainer">
        <auro-flight-header
          flights=${JSON.stringify(this.flights)}
          duration=${this.convertDuration(this.duration)}
          departureTime=${this.departureTime}
          arrivalTime=${this.arrivalTime}
        >
        </auro-flight-header>
        <div class="headerContainer">
          <slot name="departureHeader"></slot>
          <slot name="arrivalHeader"></slot>
        </div>
        <auro-flight-main
          flights=${JSON.stringify(this.flights)}
          duration=${this.convertDuration(this.duration)}
          arrivalTime=${this.arrivalTime}
          arrivalStation=${this.arrivalStation}
          departureTime=${this.departureTime}
          departureStation=${this.departureStation}
          reroutedArrivalStation=${this.reroutedArrivalStation}
          reroutedDepartureStation=${this.reroutedDepartureStation}
          stops=${this.stops ? JSON.stringify(this.stops) : null}
        >
          <slot></slot>
        </auro-flight-main>
        <footer class="flightFooter" id="flightFooter">
          <slot name="footer" id="footer"></slot>
        </footer>
      </section>
    `;
  }
}

AuroFlight.register();
